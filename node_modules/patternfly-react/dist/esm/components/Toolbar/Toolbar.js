function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import { withContext } from 'recompose';
import { Grid, ToolbarResults } from '../../index';

import { toolbarContextTypes, getToolbarContext, ToolbarContextProvider } from './ToolbarConstants';

var Toolbar = function Toolbar(_ref) {
  var children = _ref.children,
      className = _ref.className,
      props = _objectWithoutProperties(_ref, ['children', 'className']);

  var childrenArray = children && React.Children.count(children) > 0 && React.Children.toArray(children);

  var toolbarChildren = childrenArray && childrenArray.filter(function (child) {
    return child.type !== ToolbarResults;
  });
  var resultsChildren = childrenArray && childrenArray.filter(function (child) {
    return child.type === ToolbarResults;
  });

  return React.createElement(
    ToolbarContextProvider,
    { isDescendantOfToolbar: true },
    React.createElement(
      Grid,
      { fluid: true, className: className },
      React.createElement(
        Grid.Row,
        { className: 'toolbar-pf' },
        React.createElement(
          Grid.Col,
          { sm: 12 },
          React.createElement(
            'form',
            { className: 'toolbar-pf-actions' },
            toolbarChildren
          ),
          resultsChildren
        )
      )
    )
  );
};

Toolbar.propTypes = {
  /** Children nodes */
  children: PropTypes.node,
  /** Additional css classes */
  className: PropTypes.string
};

Toolbar.defaultProps = {
  children: null,
  className: ''
};

export default withContext(toolbarContextTypes, getToolbarContext)(Toolbar);