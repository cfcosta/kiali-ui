'use strict';

exports.__esModule = true;

var _utils = require('../utils');

var _options = require('../options');

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

async function toMatchElement(instance, selector, _ref = {}) {
  let { text: searchExpr } = _ref,
      options = _objectWithoutProperties(_ref, ['text']);

  options = (0, _options.defaultOptions)(options);

  const { page, handle } = await (0, _utils.getContext)(instance, () => document);

  const { text, regexp } = (0, _utils.expandSearchExpr)(searchExpr);

  const getElement = (handle, selector, text, regexp) => {
    const elements = handle.querySelectorAll(selector);
    if (regexp !== null) {
      const [, pattern, flags] = regexp.match(/\/(.*)\/(.*)?/);
      return [...elements].find(({ textContent }) => textContent.replace(/\s+/g, ' ').trim().match(new RegExp(pattern, flags)));
    }
    if (text !== null) {
      return [...elements].find(({ textContent }) => textContent.replace(/\s+/g, ' ').trim().includes(text));
    }
    return elements[0];
  };

  try {
    await page.waitForFunction(getElement, options, handle, selector, text, regexp);
  } catch (error) {
    throw (0, _utils.enhanceError)(error, `Element ${selector}${text !== null || regexp !== null ? ` (text: "${text || regexp}") ` : ' '}not found`);
  }

  const jsHandle = await page.evaluateHandle(getElement, handle, selector, text, regexp);
  return jsHandle.asElement();
}

exports.default = toMatchElement;