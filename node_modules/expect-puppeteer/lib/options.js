"use strict";

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

let defaultOptionsValue = { timeout: 500 };

const setDefaultOptions = exports.setDefaultOptions = options => {
  defaultOptionsValue = options;
};

const getDefaultOptions = exports.getDefaultOptions = () => {
  if (global.puppeteerConfig && global.puppeteerConfig.launch && global.puppeteerConfig.launch.slowMo && defaultOptionsValue && defaultOptionsValue.timeout) {
    return _extends({}, defaultOptionsValue, {
      // Multiplying slowMo by 10 is just arbitrary
      // slowMo is applied on all Puppeteer internal methods, so it is just a "slow" indicator
      // we can't use it as a real value
      timeout: defaultOptionsValue.timeout + global.puppeteerConfig.launch.slowMo * 10
    });
  }

  return defaultOptionsValue;
};

const defaultOptions = exports.defaultOptions = options => _extends({}, getDefaultOptions(), options);