'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /* eslint-disable no-use-before-define, no-restricted-syntax, no-await-in-loop */


var _utils = require('./utils');

var _notToMatch = require('./matchers/notToMatch');

var _notToMatch2 = _interopRequireDefault(_notToMatch);

var _notToMatchElement = require('./matchers/notToMatchElement');

var _notToMatchElement2 = _interopRequireDefault(_notToMatchElement);

var _toClick = require('./matchers/toClick');

var _toClick2 = _interopRequireDefault(_toClick);

var _toDisplayDialog = require('./matchers/toDisplayDialog');

var _toDisplayDialog2 = _interopRequireDefault(_toDisplayDialog);

var _toFill = require('./matchers/toFill');

var _toFill2 = _interopRequireDefault(_toFill);

var _toFillForm = require('./matchers/toFillForm');

var _toFillForm2 = _interopRequireDefault(_toFillForm);

var _toMatch = require('./matchers/toMatch');

var _toMatch2 = _interopRequireDefault(_toMatch);

var _toMatchElement = require('./matchers/toMatchElement');

var _toMatchElement2 = _interopRequireDefault(_toMatchElement);

var _toSelect = require('./matchers/toSelect');

var _toSelect2 = _interopRequireDefault(_toSelect);

var _toUploadFile = require('./matchers/toUploadFile');

var _toUploadFile2 = _interopRequireDefault(_toUploadFile);

var _options = require('./options');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const pageMatchers = {
  toClick: _toClick2.default,
  toDisplayDialog: _toDisplayDialog2.default,
  toFill: _toFill2.default,
  toFillForm: _toFillForm2.default,
  toMatch: _toMatch2.default,
  toMatchElement: _toMatchElement2.default,
  toSelect: _toSelect2.default,
  toUploadFile: _toUploadFile2.default,
  not: {
    toMatch: _notToMatch2.default,
    toMatchElement: _notToMatchElement2.default
  }
};

const elementHandleMatchers = {
  toClick: _toClick2.default,
  toFill: _toFill2.default,
  toFillForm: _toFillForm2.default,
  toMatch: _toMatch2.default,
  toMatchElement: _toMatchElement2.default,
  toSelect: _toSelect2.default,
  toUploadFile: _toUploadFile2.default,
  not: {
    toMatch: _notToMatch2.default,
    toMatchElement: _notToMatchElement2.default
  }
};

function createMatcher(matcher, page) {
  return async function throwingMatcher(...args) {
    if (typeof global.expect !== 'undefined') {
      global.expect.getState().assertionCalls += 1;
    }

    try {
      return await matcher(page, ...args);
    } catch (error) {
      Error.captureStackTrace(error, createMatcher);
      throw error;
    }
  };
}

function internalExpect(type, matchers) {
  const expectation = {
    not: {}
  };

  Object.keys(matchers).forEach(key => {
    if (key === 'not') return;
    expectation[key] = createMatcher(matchers[key], type);
  });

  Object.keys(matchers.not).forEach(key => {
    expectation.not[key] = createMatcher(matchers.not[key], type);
  });

  return expectation;
}

function expectPuppeteer(actual) {
  const type = (0, _utils.getPuppeteerType)(actual);
  switch (type) {
    case 'Page':
      return internalExpect(actual, pageMatchers);
    case 'ElementHandle':
      return internalExpect(actual, elementHandleMatchers);
    default:
      throw new Error(`${actual} is not supported`);
  }
}

if (typeof global.expect !== 'undefined') {
  const originalExpect = global.expect;
  global.expect = (actual, ...args) => {
    const type = (0, _utils.getPuppeteerType)(actual);
    if (type) {
      const matchers = expectPuppeteer(actual);
      const jestMatchers = originalExpect(actual, ...args);
      return _extends({}, jestMatchers, matchers, {
        not: _extends({}, jestMatchers.not, matchers.not)
      });
    }
    return originalExpect(actual, ...args);
  };
  Object.keys(originalExpect).forEach(prop => {
    global.expect[prop] = originalExpect[prop];
  });
}

module.exports = expectPuppeteer;
module.exports.setDefaultOptions = _options.setDefaultOptions;
module.exports.getDefaultOptions = _options.getDefaultOptions;