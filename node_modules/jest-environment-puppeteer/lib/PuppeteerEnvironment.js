'use strict';

exports.__esModule = true;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _jestEnvironmentNode = require('jest-environment-node');

var _jestEnvironmentNode2 = _interopRequireDefault(_jestEnvironmentNode);

var _puppeteer = require('puppeteer');

var _puppeteer2 = _interopRequireDefault(_puppeteer);

var _readConfig = require('./readConfig');

var _readConfig2 = _interopRequireDefault(_readConfig);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const handleError = error => {
  process.emit('uncaughtException', error);
};

class PuppeteerEnvironment extends _jestEnvironmentNode2.default {
  async setup() {
    const config = await (0, _readConfig2.default)();
    this.global.puppeteerConfig = config;

    const wsEndpoint = _fs2.default.readFileSync(_constants.WS_ENDPOINT_PATH, 'utf8');
    if (!wsEndpoint) {
      throw new Error('wsEndpoint not found');
    }
    this.global.browser = await _puppeteer2.default.connect({
      slowMo: config && config.launch && config.launch.slowMo ? config.launch.slowMo : undefined,
      ignoreHTTPSErrors: config && config.launch && config.launch.ignoreHTTPSErrors ? config.launch.ignoreHTTPSErrors : undefined,
      browserWSEndpoint: wsEndpoint
    });
    this.global.page = await this.global.browser.newPage();
    if (config && config.exitOnPageError) {
      this.global.page.addListener('pageerror', handleError);
    }
  }

  async teardown() {
    this.global.page.removeListener('pageerror', handleError);
    await this.global.page.close();
  }
}

exports.default = PuppeteerEnvironment;