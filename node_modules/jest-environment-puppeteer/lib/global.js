'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.setup = setup;
exports.teardown = teardown;

var _stream = require('stream');

var _stream2 = _interopRequireDefault(_stream);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _rimraf = require('rimraf');

var _rimraf2 = _interopRequireDefault(_rimraf);

var _puppeteer = require('puppeteer');

var _puppeteer2 = _interopRequireDefault(_puppeteer);

var _spawnd = require('spawnd');

var _spawnd2 = _interopRequireDefault(_spawnd);

var _cwd = require('cwd');

var _cwd2 = _interopRequireDefault(_cwd);

var _waitPort = require('wait-port');

var _waitPort2 = _interopRequireDefault(_waitPort);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _readConfig = require('./readConfig');

var _readConfig2 = _interopRequireDefault(_readConfig);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let browser;
let server;

const serverLogPrefixer = new _stream2.default.Transform({
  transform(chunk, encoding, callback) {
    this.push(_chalk2.default.magentaBright(`[Jest Puppeteer server] ${chunk.toString()}`));
    callback();
  }
});

async function setup() {
  const config = await (0, _readConfig2.default)();
  browser = await _puppeteer2.default.launch(config.launch);
  _mkdirp2.default.sync(_constants.DIR);
  _fs2.default.writeFileSync(_constants.WS_ENDPOINT_PATH, browser.wsEndpoint());

  if (config.server) {
    server = (0, _spawnd2.default)(config.server.command, _extends({
      shell: true,
      env: process.env,
      cwd: (0, _cwd2.default)()
    }, config.server.options));

    if (config.server.debug) {
      console.log(_chalk2.default.magentaBright('\nJest Puppeteer server output:'));
      server.stdout.pipe(serverLogPrefixer).pipe(process.stdout);
    }

    if (config.server.port) {
      const launchTimeout = config.server.launchTimeout || 5000;
      const timeout = setTimeout(() => {
        console.error(_chalk2.default.red(`\nJest Puppeteer Error: Server has taken more than ${launchTimeout}ms to start.`));
        console.error(_chalk2.default.blue(`You can set "server.launchTimeout" in jest-puppeteer.config.js`));
        process.exit(1);
      }, launchTimeout);
      await (0, _waitPort2.default)({
        port: config.server.port,
        output: 'silent'
      });
      clearTimeout(timeout);
    }
  }
}

async function teardown() {
  if (server) await server.destroy();
  await browser.close();
  _rimraf2.default.sync(_constants.DIR);
}