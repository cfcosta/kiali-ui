'use strict';

exports.__esModule = true;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _util = require('util');

var _cwd = require('cwd');

var _cwd2 = _interopRequireDefault(_cwd);

var _lodash = require('lodash');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const exists = (0, _util.promisify)(_fs2.default.exists);

const DEFAULT_CONFIG = {
  launch: {},
  exitOnPageError: true
};
const DEFAULT_CONFIG_CI = {
  launch: {
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  },
  exitOnPageError: true
};

async function readConfig() {
  const defaultConfig = process.env.CI === 'true' ? DEFAULT_CONFIG_CI : DEFAULT_CONFIG;

  const hasCustomConfigPath = !!process.env.JEST_PUPPETEER_CONFIG;
  const configPath = process.env.JEST_PUPPETEER_CONFIG || 'jest-puppeteer.config.js';
  const absConfigPath = _path2.default.resolve((0, _cwd2.default)(), configPath);
  const configExists = await exists(absConfigPath);

  if (hasCustomConfigPath && !configExists) {
    throw new Error(`Error: Can't find a root directory while resolving a config file path.\nProvided path to resolve: ${configPath}`);
  }

  if (!hasCustomConfigPath && !configExists) {
    return defaultConfig;
  }

  // eslint-disable-next-line global-require, import/no-dynamic-require
  const localConfig = require(absConfigPath);
  return (0, _lodash.merge)({}, defaultConfig, localConfig);
}

exports.default = readConfig;